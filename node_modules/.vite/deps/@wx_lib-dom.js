import "./chunk-F3FYYIAV.js";

// node_modules/@wx/lib-dom/dist/dom.es.js
function locate(el, attr = "data-id") {
  let node = el;
  if (!node.tagName && el.target)
    node = el.target;
  while (node) {
    if (node.getAttribute) {
      const id2 = node.getAttribute(attr);
      if (id2)
        return node;
    }
    node = node.parentNode;
  }
  return null;
}
function locateAttr(el, attr = "data-id") {
  const node = locate(el, attr);
  if (node)
    return node.getAttribute(attr);
  return null;
}
function locateID(el, attr = "data-id") {
  const node = locate(el, attr);
  if (node) {
    return id$1(node.getAttribute(attr));
  }
  return null;
}
function locateNode(el, node) {
  let n = el;
  while (n) {
    if (n === node) {
      return true;
    }
    n = n == null ? void 0 : n.parentNode;
  }
  return null;
}
function id$1(value) {
  if (typeof value === "string") {
    const t = value * 1;
    if (!isNaN(t))
      return t;
  }
  return value;
}
function delegateEvent(node, handlers, event) {
  function handleEvent(ev) {
    const node2 = locate(ev);
    if (!node2)
      return;
    const id2 = id$1(node2.dataset.id);
    if (typeof handlers === "function")
      return handlers(id2, ev);
    let action;
    let test = ev.target;
    while (test != node2) {
      action = test.dataset ? test.dataset.action : null;
      if (action) {
        if (handlers[action]) {
          handlers[action](id2, ev);
          return;
        }
      }
      test = test.parentNode;
    }
    if (handlers[event])
      handlers[event](id2, ev);
  }
  node.addEventListener(event, handleEvent);
}
function delegateClick(node, handlers) {
  delegateEvent(node, handlers, "click");
  if (handlers.dblclick)
    delegateEvent(node, handlers.dblclick, "dblclick");
}
function clickOutside(node, callback) {
  const events = ["click", "contextmenu"];
  const handleClick = (event) => {
    if (node && !node.contains(event.target) && !event.defaultPrevented) {
      callback(event);
    }
  };
  events.forEach((e) => document.addEventListener(e, handleClick, true));
  return {
    destroy() {
      events.forEach((e) => document.removeEventListener(e, handleClick, true));
    }
  };
}
var id = (/* @__PURE__ */ new Date()).valueOf();
function uid() {
  id += 1;
  return id;
}
function toFixed(num) {
  if (num < 10)
    return "0" + num;
  return num.toString();
}
function toFixedMs(num) {
  const temp = toFixed(num);
  return temp.length == 2 ? "0" + temp : temp;
}
function getDuodecade(year) {
  const start = Math.floor(year / 11) * 11;
  return {
    start,
    end: start + 11
  };
}
function getISOWeek(ndate) {
  let nday = ndate.getDay();
  if (nday === 0) {
    nday = 7;
  }
  const first_thursday = new Date(ndate.valueOf());
  first_thursday.setDate(ndate.getDate() + (4 - nday));
  const year_number = first_thursday.getFullYear();
  const ordinal_date = Math.floor(
    (first_thursday.getTime() - new Date(year_number, 0, 1).getTime()) / 864e5
  );
  const weekNumber = 1 + Math.floor(ordinal_date / 7);
  return weekNumber;
}
var emptyAmPm = ["", ""];
function date2str(mask, date, locale2) {
  switch (mask) {
    case "%d":
      return toFixed(date.getDate());
    case "%m":
      return toFixed(date.getMonth() + 1);
    case "%j":
      return date.getDate();
    case "%n":
      return date.getMonth() + 1;
    case "%y":
      return toFixed(date.getFullYear() % 100);
    case "%Y":
      return date.getFullYear();
    case "%D":
      return locale2.dayShort[date.getDay()];
    case "%l":
      return locale2.dayFull[date.getDay()];
    case "%M":
      return locale2.monthShort[date.getMonth()];
    case "%F":
      return locale2.monthFull[date.getMonth()];
    case "%h":
      return toFixed((date.getHours() + 11) % 12 + 1);
    case "%g":
      return (date.getHours() + 11) % 12 + 1;
    case "%G":
      return date.getHours();
    case "%H":
      return toFixed(date.getHours());
    case "%i":
      return toFixed(date.getMinutes());
    case "%a":
      return ((date.getHours() > 11 ? locale2.pm : locale2.am) || emptyAmPm)[0];
    case "%A":
      return ((date.getHours() > 11 ? locale2.pm : locale2.am) || emptyAmPm)[1];
    case "%s":
      return toFixed(date.getSeconds());
    case "%S":
      return toFixedMs(date.getMilliseconds());
    case "%W":
      return toFixed(getISOWeek(date));
    case "%c": {
      let str = date.getFullYear() + "";
      str += "-" + toFixed(date.getMonth() + 1);
      str += "-" + toFixed(date.getDate());
      str += "T";
      str += toFixed(date.getHours());
      str += ":" + toFixed(date.getMinutes());
      str += ":" + toFixed(date.getSeconds());
      return str;
    }
    default:
      return mask;
  }
}
var formatFlags = /%[a-zA-Z]/g;
function dateToString(format, locale2) {
  if (typeof format == "function")
    return format;
  return function(date) {
    if (!date)
      return "";
    if (!date.getMonth)
      date = new Date(date);
    return format.replace(
      formatFlags,
      (s) => date2str(s, date, locale2)
    );
  };
}
function isObject(a) {
  return a && typeof a === "object" && !Array.isArray(a);
}
function extend(a, b) {
  for (const key in b) {
    const from = b[key];
    if (isObject(a[key]) && isObject(from)) {
      a[key] = extend(
        { ...a[key] },
        b[key]
      );
    } else {
      a[key] = b[key];
    }
  }
  return a;
}
function locale(words) {
  return {
    getGroup(group) {
      const block = words[group];
      return (key) => {
        return block ? block[key] || key : key;
      };
    },
    getRaw() {
      return words;
    },
    extend(values, optional) {
      if (!values)
        return this;
      let data;
      if (optional) {
        data = extend({ ...values }, words);
      } else {
        data = extend({ ...words }, values);
      }
      return locale(data);
    }
  };
}
export {
  clickOutside,
  dateToString,
  delegateClick,
  delegateEvent,
  getDuodecade,
  id$1 as id,
  locale,
  locate,
  locateAttr,
  locateID,
  locateNode,
  uid
};
//# sourceMappingURL=@wx_lib-dom.js.map
